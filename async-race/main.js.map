{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/utils/supportConstants.ts","webpack://my-webpack-project/./src/utils/supportMethods.ts","webpack://my-webpack-project/./src/controls/garage.ts","webpack://my-webpack-project/./src/controls/winners.ts","webpack://my-webpack-project/./src/components/winners.ts","webpack://my-webpack-project/./src/controls/engine.ts","webpack://my-webpack-project/./src/components/popup.ts","webpack://my-webpack-project/./src/components/race.ts","webpack://my-webpack-project/./src/components/garage.ts","webpack://my-webpack-project/./src/index.ts","webpack://my-webpack-project/./src/components/app.ts"],"sourcesContent":["import { GarageState, WinnersState } from './interfaces';\r\n\r\nexport const brands: Array<string> = [\r\n  'Nissan', 'Porsche', 'Audi', 'Hyundai', 'Ford',\r\n  'Volkswagen', 'Honda', 'BMW', 'Mercedes-Benz', 'Toyota',\r\n];\r\nexport const models: Array<string> = [\r\n  'Juke', 'Cayenne', 'A4', 'Elantra', 'Fusion',\r\n  'Jetta', 'Civic', 'M5', 'G63', 'Camry',\r\n];\r\n\r\nexport const colorCarSvg = `\r\n  <?xml version=\"1.0\" ?>\r\n  <!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>\r\n  <svg enable-background=\"new 0 0 1000 600\" height=\"40\" id=\"Shape_1_5_\" overflow=\"visible\" version=\"1.1\" viewBox=\"0 0 1000 600\" width=\"60\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n    <g id=\"Shape_1\">\r\n      <g>\r\n        <path d=\"M251.99,369.532c-3.653,0-6.615,2.962-6.615,6.615s2.962,6.615,6.615,6.615s6.615-2.962,6.615-6.615    S255.644,369.532,251.99,369.532z M251.99,388.304c-1.548,0-2.804,1.256-2.804,2.805c0,1.548,1.255,2.804,2.804,2.804    c1.549,0,2.804-1.256,2.804-2.804C254.794,389.56,253.539,388.304,251.99,388.304z M259.421,396.911v22.711    c6.642-1.127,12.776-3.74,18.053-7.483l-16.059-16.059C260.767,396.387,260.103,396.667,259.421,396.911z M271.926,385.574    l16.058,16.058c3.744-5.276,6.354-11.413,7.482-18.055h-22.713C272.508,384.259,272.233,384.926,271.926,385.574z     M271.924,366.722c0.307,0.648,0.585,1.313,0.83,1.995h22.712c-1.127-6.642-3.74-12.776-7.483-18.054L271.924,366.722z     M242.566,356.215c0.649-0.308,1.313-0.587,1.995-0.831v-22.711c-6.642,1.127-12.776,3.74-18.053,7.483L242.566,356.215z     M251.99,303.936c-39.881,0-72.212,32.33-72.212,72.212s32.331,72.212,72.212,72.212c39.882,0,72.212-32.33,72.212-72.212    S291.872,303.936,251.99,303.936z M251.99,427.728c-28.487,0-51.58-23.093-51.58-51.58c0-28.486,23.093-51.58,51.58-51.58    s51.58,23.094,51.58,51.58C303.57,404.635,280.477,427.728,251.99,427.728z M251.99,363.989c1.549,0,2.804-1.256,2.804-2.805    c0-1.548-1.255-2.804-2.804-2.804c-1.548,0-2.804,1.256-2.804,2.804C249.187,362.733,250.442,363.989,251.99,363.989z     M277.474,340.155c-5.276-3.743-11.412-6.355-18.053-7.482v22.711c0.682,0.244,1.347,0.522,1.995,0.83L277.474,340.155z     M232.056,366.721l-16.058-16.059c-3.744,5.277-6.355,11.413-7.482,18.055h22.713    C231.473,368.035,231.748,367.369,232.056,366.721z M226.506,412.14c5.277,3.743,11.413,6.355,18.055,7.482v-22.711    c-0.682-0.244-1.348-0.522-1.996-0.83L226.506,412.14z M231.227,383.577h-22.711c1.127,6.642,3.739,12.777,7.482,18.055    l16.059-16.06C231.75,384.924,231.471,384.259,231.227,383.577z M239.833,376.146c0-1.549-1.255-2.804-2.804-2.804    c-1.549,0-2.804,1.255-2.804,2.804s1.255,2.804,2.804,2.804C238.577,378.95,239.833,377.695,239.833,376.146z M264.148,376.146    c0,1.549,1.255,2.804,2.804,2.804c1.549,0,2.804-1.255,2.804-2.804s-1.255-2.804-2.804-2.804    C265.403,373.343,264.148,374.598,264.148,376.146z M811.641,369.532c-3.653,0-6.615,2.962-6.615,6.615s2.962,6.615,6.615,6.615    s6.615-2.962,6.615-6.615S815.294,369.532,811.641,369.532z M802.217,356.215c0.648-0.308,1.313-0.587,1.994-0.831v-22.711    c-6.642,1.127-12.776,3.74-18.054,7.483L802.217,356.215z M811.641,388.304c-1.549,0-2.804,1.256-2.804,2.805    c0,1.548,1.255,2.804,2.804,2.804s2.804-1.256,2.804-2.804C814.444,389.56,813.189,388.304,811.641,388.304z M819.071,396.911    v22.711c6.642-1.127,12.775-3.74,18.053-7.483l-16.059-16.059C820.417,396.387,819.753,396.667,819.071,396.911z M832.402,383.577    c-0.244,0.682-0.52,1.349-0.826,1.997l16.058,16.058c3.744-5.276,6.354-11.413,7.482-18.055H832.402z M937.276,292.157    c-9.801-15.004-34.896-20.235-54.012-26.477c-133.488-32.242-177.882-21.747-200.162-24.888    c-4.495-1.199-8.503-5.123-12.179-7.413c-8.057-5.019-16.418-9.434-24.358-14.298c-13.119-8.036-73.653-41.146-90.02-47.128    c-35.963-13.142-92.818-23.68-229.815-12.708c-5.56-1.528-8.916-6.016-14.826-7.414c-5.846-1.383-11.214,1.693-15.356,2.648    c0.075,4.491-0.326,8.136-1.059,11.649c-26.775,11.291-53.869,19.953-80.488,31.242c-11.108,4.711-22.569,9.32-33.89,14.297    c-7.042,3.097-13.77,7.495-21.71,10.062c-8.624,2.786-18.051,1.527-27.536,3.706c-17.267,3.967-35.99,4.497-55.071,4.766    c-2.181,3.738-5.977,7.503-6.884,12.18c3.305,1.02,4.412,3.298,4.236,7.942c-5.84,8.653-4.274,20.981-4.236,34.949    c-12.441,6.37-14.333,29.711-11.12,48.187c-0.353,1.589-0.706,3.178-1.059,4.767c0.665,5.223,2.365,10.742,2.647,16.415    c4.672,3.133,9.968,8.167,13.238,12.709c1.595,2.215,2.371,6.033,5.295,6.884c15.631,11.41,94.785,13.768,94.785,13.768    l4.164,0.228c-0.637-3.934-0.973-7.969-0.973-12.082c0-41.478,33.625-75.102,75.102-75.102c41.478,0,75.102,33.624,75.102,75.102    c0,6.966-0.952,18.277-2.728,24.678l416.073-0.736c-2.527-7.52-3.898-15.57-3.898-23.941c0-41.478,33.624-75.102,75.102-75.102    s75.102,33.624,75.102,75.102c0,7.27-1.036,14.297-2.964,20.945l4.252-0.089c0,0,32.779-1.584,40.773-5.296    c7.994-3.711,11.12-14.297,11.12-14.297l-2.118-22.24C937.806,355.171,947.652,308.042,937.276,292.157z M272.719,237.621    c-24.887-16.535-11.702-35.842-12.373-35.781c-0.398,0.354-0.685,0.636-0.865,0.827c0.528-0.559,0.788-0.82,0.865-0.827    c6.412-5.714,43.006-31.271,172.82-31.474c4.06,22.768,8.12,52.68,12.179,75.446C393.112,244.229,290.3,245.112,272.719,237.621z     M607.381,246.088c-11.408,0-124.969-0.031-124.969-0.031s-18.331-48.33-24.887-75.157c0.763,0.07,23.298,1.055,23.298,1.055    s44.613,5.079,72.546,14.298c21.976,7.253,65.363,36.403,66.19,38.126C606.506,225.047,603.416,235.329,607.381,246.088z     M811.641,303.936c-39.882,0-72.212,32.33-72.212,72.212s32.33,72.212,72.212,72.212s72.212-32.33,72.212-72.212    S851.522,303.936,811.641,303.936z M811.641,427.728c-28.486,0-51.58-23.093-51.58-51.58c0-28.486,23.094-51.58,51.58-51.58    c28.487,0,51.58,23.094,51.58,51.58C863.221,404.635,840.128,427.728,811.641,427.728z M791.706,366.721l-16.059-16.059    c-3.743,5.277-6.354,11.413-7.481,18.055h22.713C791.123,368.035,791.398,367.369,791.706,366.721z M799.483,376.146    c0-1.549-1.256-2.804-2.805-2.804c-1.548,0-2.804,1.255-2.804,2.804s1.256,2.804,2.804,2.804    C798.228,378.95,799.483,377.695,799.483,376.146z M811.641,363.989c1.549,0,2.804-1.256,2.804-2.805    c0-1.548-1.255-2.804-2.804-2.804s-2.804,1.256-2.804,2.804C808.837,362.733,810.092,363.989,811.641,363.989z M837.125,340.155    c-5.277-3.743-11.412-6.355-18.054-7.482v22.711c0.682,0.244,1.347,0.522,1.995,0.83L837.125,340.155z M823.798,376.146    c0,1.549,1.256,2.804,2.805,2.804c1.548,0,2.804-1.255,2.804-2.804s-1.256-2.804-2.804-2.804    C825.054,373.343,823.798,374.598,823.798,376.146z M786.156,412.14c5.277,3.743,11.413,6.355,18.055,7.482v-22.711    c-0.683-0.244-1.348-0.522-1.996-0.83L786.156,412.14z M790.877,383.577h-22.711c1.127,6.642,3.739,12.777,7.482,18.055    l16.059-16.06C791.399,384.924,791.121,384.259,790.877,383.577z M832.404,368.717h22.711c-1.127-6.642-3.739-12.776-7.482-18.054    l-16.059,16.059C831.881,367.37,832.16,368.035,832.404,368.717z\" fill=\"none\"/>\r\n      </g>\r\n    </g>\r\n  </svg>`;\r\n\r\nexport const defaultGarageState: GarageState = {\r\n  page: 1,\r\n  createState: {\r\n    name: '',\r\n    color: '',\r\n  },\r\n  updateState: {\r\n    name: '',\r\n    color: '',\r\n  },\r\n};\r\n\r\nexport const defaultWinnersState: WinnersState = {\r\n  page: 1,\r\n  sortOptionList: [\r\n    { key: 'wins', force: true },\r\n    { key: 'time', force: true },\r\n  ],\r\n};\r\n\r\nexport const popupOptions = {\r\n  duration: 250,\r\n  easing: 'ease',\r\n};\r\nexport const popupWrapperKeyFrames = [{ opacity: 0 }, { opacity: 1 }];\r\nexport const popupWindowKeyFrames = [\r\n  { transform: 'translateY(-200px)', opacity: 0 },\r\n  { transform: 'translateY(0)', opacity: 1 },\r\n];\r\n","import {\r\n  CarData, ElementData, GarageState, PanelHTML, Racer, TableItemData,\r\n} from './interfaces';\r\nimport { brands, models } from './supportConstants';\r\nimport { colorCarSvg } from '../utils/supportConstants';\r\n\r\nexport const setElement = ({\r\n  tag, classList = undefined, innerText = undefined, attributes = undefined,\r\n}: ElementData) => {\r\n  const elem = document.createElement(tag) as HTMLElement;\r\n  if (classList) elem.classList.add(...classList);\r\n  if (innerText) elem.textContent = String(innerText);\r\n  if (attributes) attributes.forEach((attr) => elem.setAttribute(attr.name, attr.value));\r\n  return elem;\r\n};\r\n\r\nexport const getPanel = (name: string, data: CarData) => {\r\n  const panel = setElement({\r\n    tag: 'DIV',\r\n    classList: [`${name}-panel`],\r\n    attributes: [{ name: 'id', value: name }],\r\n  });\r\n  const textInput = setElement({\r\n    tag: 'INPUT',\r\n    classList: [`${name}-input`],\r\n    attributes: [{ name: 'type', value: 'text' }],\r\n  });\r\n  const colorInput = setElement({\r\n    tag: 'INPUT',\r\n    classList: [`${name}-input`],\r\n    attributes: [{ name: 'type', value: 'color' }],\r\n  });\r\n  const acceptButton = setElement({\r\n    tag: 'BUTTON',\r\n    classList: [`${name}-button`],\r\n    innerText: `${name} car`,\r\n  });\r\n  (<HTMLInputElement>textInput).value = data.name;\r\n  (<HTMLInputElement>colorInput).value = data.color;\r\n\r\n  panel.append(textInput, colorInput, acceptButton);\r\n  return panel;\r\n};\r\n\r\nexport const getRandomCarName = (): string => {\r\n  const brand: string = brands[Math.floor(Math.random() * brands.length)];\r\n  const model: string = models[Math.floor(Math.random() * models.length)];\r\n\r\n  return `${brand} ${model}`;\r\n};\r\n\r\nexport const getRandomCarColor = (): string => {\r\n  const colorCode: string = Math.floor(Math.random() * 16777215).toString(16);\r\n  return `#${colorCode}`;\r\n};\r\n\r\nexport const getRandomCarDataList = (): Array<CarData> => new Array(100).fill(0).map(() => {\r\n  const randomName: string = getRandomCarName();\r\n  const randomColor: string = getRandomCarColor();\r\n  const randomCarData: CarData = { name: randomName, color: randomColor };\r\n  return randomCarData;\r\n});\r\n\r\nexport const setCarDataToContainer = (containerSelector: string, data: CarData): void => {\r\n  const container: HTMLElement = document.querySelector(containerSelector);\r\n  const textInput: HTMLInputElement = container.querySelector(\"input[type='text']\");\r\n  const colorInput: HTMLInputElement = container.querySelector(\"input[type='color']\");\r\n\r\n  textInput.value = data.name;\r\n  colorInput.value = data.color;\r\n};\r\n\r\nexport const getCarDataFromContainer = (containerSelector: string): CarData => {\r\n  const container = document.querySelector(containerSelector);\r\n  const textInput: HTMLInputElement = container.querySelector(\"input[type='text']\");\r\n  const colorInput: HTMLInputElement = container.querySelector(\"input[type='color']\");\r\n  return {\r\n    name: textInput.value,\r\n    color: colorInput.value,\r\n  };\r\n};\r\n\r\nexport const getCarHTML = (carData: CarData): PanelHTML => {\r\n  const { name: carName, color: carColor }: CarData = carData;\r\n  const carItem: HTMLElement = setElement({ tag: 'LI', classList: ['car-item'] });\r\n  const carControls: HTMLElement = setElement({ tag: 'DIV', classList: ['car-controls'] });\r\n  const carNameElem: HTMLElement = setElement({ tag: 'SPAN', classList: ['car-title'], innerText: carName });\r\n  const select: HTMLElement = setElement({ tag: 'BUTTON', classList: ['car-select'], innerText: 'select' });\r\n  const remove: HTMLElement = setElement({ tag: 'BUTTON', classList: ['car-remove'], innerText: 'remove' });\r\n  const start: HTMLElement = setElement({ tag: 'BUTTON', classList: ['car-start'], innerText: 'start' });\r\n  const stop: HTMLElement = setElement({ tag: 'BUTTON', classList: ['car-stop', 'disabled'], innerText: 'stop' });\r\n  const carContainer: HTMLElement = setElement({ tag: 'DIV', classList: ['car-container'] });\r\n  const car: HTMLElement = setElement({ tag: 'DIV', classList: ['car'] });\r\n  car.innerHTML = colorCarSvg;\r\n  const path: SVGPathElement = car.querySelector('path');\r\n  path.style.fill = carColor;\r\n  carItem.dataset.id = String(carData.id);\r\n\r\n  carControls.append(select, remove, start, stop, carNameElem);\r\n  carItem.append(carControls, carContainer);\r\n  carContainer.append(car);\r\n\r\n  return {\r\n    panel: carItem,\r\n    controls: [select, remove, start, stop],\r\n  };\r\n};\r\n\r\nexport const toggleEngineButtons = (id: number, forceStart: boolean, forceReset: boolean): void => {\r\n  const startButton: HTMLElement = document.querySelector(`[data-id=\"${id}\"] .car-start`);\r\n  const stopButton: HTMLElement = document.querySelector(`[data-id=\"${id}\"] .car-stop`);\r\n  startButton.classList.toggle('disabled', forceStart);\r\n  stopButton.classList.toggle('disabled', forceReset);\r\n};\r\n\r\nexport const toggleRaceButtons = (force: boolean) => {\r\n  const startRaceButton: HTMLElement = document.querySelector('.start-race');\r\n  const resetRaceButton: HTMLElement = document.querySelector('.reset-race');\r\n  startRaceButton.classList.toggle('disabled', !force);\r\n  resetRaceButton.classList.toggle('disabled', force);\r\n};\r\n\r\nexport const getControlPanelHTML = (garageState: GarageState): PanelHTML => {\r\n  const { createState, updateState }: GarageState = garageState;\r\n  const winnersRoute: HTMLElement = setElement({ tag: 'BUTTON', classList: ['winners-route'], innerText: 'TO WINNERS' });\r\n  const pageTitle: HTMLElement = setElement({ tag: 'H2', classList: ['garage-title'], innerText: 'Garage' });\r\n  const controlPanel = setElement({ tag: 'DIV', classList: ['control-panel'] });\r\n  const racePanel = setElement({ tag: 'DIV', classList: ['race-panel'] });\r\n  const createPanel = getPanel('create', createState);\r\n  const updatePanel = getPanel('update', updateState);\r\n  const create: HTMLElement = createPanel.querySelector('button');\r\n  const update: HTMLElement = updatePanel.querySelector('button');\r\n  const pageContainer: HTMLElement = setElement({ tag: 'DIV', classList: ['page-container'] });\r\n  const pagePrev: HTMLElement = setElement({ tag: 'BUTTON', classList: ['page-button'], innerText: '< prev' });\r\n  const pageNext: HTMLElement = setElement({ tag: 'BUTTON', classList: ['page-button'], innerText: 'next >' });\r\n  const pageDesription: HTMLElement = setElement({ tag: 'SPAN', classList: ['page-description'] });\r\n  const generate = setElement({ tag: 'BUTTON', classList: ['generate-button'], innerText: 'generate cars' });\r\n  const startRace = setElement({ tag: 'BUTTON', classList: ['start-race'], innerText: 'start race' });\r\n  const resetRace = setElement({ tag: 'BUTTON', classList: ['reset-race', 'disabled'], innerText: 'reset race' });\r\n\r\n  pageContainer.append(pagePrev, pageDesription, pageNext);\r\n  racePanel.append(generate, startRace, resetRace);\r\n  controlPanel.append(winnersRoute, pageTitle, createPanel, updatePanel, racePanel, pageContainer);\r\n  return {\r\n    panel: controlPanel,\r\n    controls: [winnersRoute, create, update, generate, pagePrev, pageNext, startRace, resetRace],\r\n  };\r\n};\r\n\r\nexport const setFinishPosition = (arg: HTMLElement | number): void => {\r\n  let carElem: HTMLElement;\r\n  if (typeof arg === 'number') {\r\n    carElem = document.querySelector(`.car-item[data-id=\"${arg}\"] .car`);\r\n  } else {\r\n    carElem = arg;\r\n  }\r\n  carElem.style.left = `calc(100% - ${carElem.offsetWidth}px)`;\r\n};\r\n\r\nexport const getRacer = (id: number, raceTime: number): Racer => {\r\n  const newCarElem: HTMLElement = document.querySelector(`.car-item[data-id=\"${id}\"] .car`);\r\n  const finishPosition = `calc(100% - ${newCarElem.offsetWidth}px)`;\r\n  const carAnimation: Animation = newCarElem.animate(\r\n    [{ left: 0 }, { left: finishPosition }],\r\n    { duration: raceTime },\r\n  );\r\n  const racer: Racer = {\r\n    id, carAnimation, isActive: true, raceTime,\r\n  };\r\n  carAnimation.oncancel = (): void => {\r\n    racer.isActive = false;\r\n    newCarElem.style.left = '0';\r\n  };\r\n  carAnimation.onfinish = (): void => {\r\n    const { currentTime } = racer.carAnimation;\r\n    racer.carAnimation.currentTime = currentTime;\r\n    if (racer.isActive) newCarElem.style.left = finishPosition;\r\n  };\r\n  return racer;\r\n};\r\n\r\nexport const getTableItem = (tableItemData: TableItemData): HTMLElement => {\r\n  const {\r\n    id, name, color, wins, time,\r\n  }: TableItemData = tableItemData;\r\n\r\n  const winnersItem: HTMLElement = setElement({ tag: 'LI', classList: ['winners-item'] });\r\n  const numberCell: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-number'], innerText: id });\r\n  const carCell: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-car'], innerText: 'Car' });\r\n  carCell.innerHTML = colorCarSvg;\r\n  const path: SVGPathElement = carCell.querySelector('path');\r\n  path.style.fill = color;\r\n  const nameCell: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-name'], innerText: name });\r\n  const winsCell: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-wins'], innerText: wins });\r\n  const bestTimeCell: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-time'], innerText: time });\r\n\r\n  winnersItem.append(numberCell, carCell, nameCell, winsCell, bestTimeCell);\r\n  return winnersItem;\r\n};\r\n\r\nexport const getWinnerPanel = (winnerListElem: HTMLElement): PanelHTML => {\r\n  const winnersPage: HTMLElement = setElement({ tag: 'DIV', classList: ['winners-container'] });\r\n  const garageRoute: HTMLElement = setElement({ tag: 'BUTTON', classList: ['garage-route'], innerText: 'TO GARAGE' });\r\n  const winnersTitle: HTMLElement = setElement({ tag: 'H2', classList: ['winners-title'], innerText: 'Winners' });\r\n  const winnersTable: HTMLElement = setElement({ tag: 'DIV', classList: ['winners-table'] });\r\n  const tableHeading: HTMLElement = setElement({ tag: 'DIV', classList: ['winners-heading'] });\r\n  const number: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-number'], innerText: 'Number' });\r\n  const car: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-car'], innerText: 'Car' });\r\n  const name: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-name'], innerText: 'Name' });\r\n  const wins: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-wins', 'clickable'], innerText: 'Wins' });\r\n  const bestTime: HTMLElement = setElement({ tag: 'DIV', classList: ['winner-time', 'clickable'], innerText: 'Best Time(ms)' });\r\n  const pageControls: HTMLElement = setElement({ tag: 'DIV', classList: ['page-controls'] });\r\n  const pagePrev: HTMLElement = setElement({ tag: 'BUTTON', classList: ['page-button'], innerText: '< prev' });\r\n  const pageDescription = setElement({ tag: 'SPAN', classList: ['page-description'] });\r\n  const pageNext: HTMLElement = setElement({ tag: 'BUTTON', classList: ['page-button'], innerText: 'next >' });\r\n\r\n  tableHeading.append(number, car, name, wins, bestTime);\r\n  pageControls.append(pagePrev, pageDescription, pageNext);\r\n  winnersTable.append(tableHeading, winnerListElem);\r\n  winnersPage.append(garageRoute, winnersTitle, pageControls, winnersTable);\r\n  return {\r\n    panel: winnersPage,\r\n    controls: [garageRoute, pagePrev, pageNext, wins, bestTime],\r\n  };\r\n};\r\n\r\nexport const toggleUserControls = (force: boolean): void => {\r\n  const allUserControls = Array.from(document.querySelectorAll('button'));\r\n  allUserControls.forEach((button) => button.classList.toggle('disabled', !force));\r\n};\r\n","import { CarData } from '../utils/interfaces';\r\n\r\nclass GarageControls {\r\n  url: string;\r\n\r\n  carLimit: number;\r\n\r\n  constructor(baseUrl: string) {\r\n    this.url = `${baseUrl}/garage`;\r\n    this.carLimit = 7;\r\n  }\r\n\r\n  async getCar(id: number): Promise<CarData> {\r\n    const response: Response = await fetch(`${this.url}/${id}`, { method: 'GET' });\r\n    const carData: CarData = await response.json();\r\n    return carData;\r\n  }\r\n\r\n  async getCars(page?: number): Promise<Array<CarData>> {\r\n    let totalUrl: string = this.url;\r\n    if (page) totalUrl += `?_page=${page}&_limit=${this.carLimit}`;\r\n    const response: Response = await fetch(totalUrl, { method: 'GET' });\r\n    const newCarDataList: Array<CarData> = await response.json();\r\n    return newCarDataList;\r\n  }\r\n\r\n  async createCar(carData: CarData): Promise<CarData> {\r\n    const response: Response = await fetch(this.url, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(carData),\r\n    });\r\n    const data: CarData = await response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  async updateCar(id: number, newCarData: CarData): Promise<CarData> {\r\n    const url = `${this.url}/${id}`;\r\n    const response: Response = await fetch(url, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newCarData),\r\n    });\r\n    const newData: CarData = await response.json();\r\n\r\n    return newData;\r\n  }\r\n\r\n  async deleteCar(id: number): Promise<void> {\r\n    const url = `${this.url}/${id}`;\r\n    await fetch(url, { method: 'DELETE' });\r\n  }\r\n}\r\n\r\nexport default GarageControls;\r\n","import { Racer, Winner } from '../utils/interfaces';\n\nclass WinnerControls {\n  url: string;\n\n  limit: number;\n\n  constructor(baseUrl: string) {\n    this.url = `${baseUrl}/winners`;\n    this.limit = 10;\n  }\n\n  async getWinner(id: number): Promise<Winner> {\n    const response: Response = await fetch(`${this.url}/${id}`, { method: 'GET' });\n    if (!response.ok) throw Error('no saved winners, just try create new');\n    const winnerData: Winner = await response.json();\n    return winnerData;\n  }\n\n  async getWinners(page?: number): Promise<Array<Winner>> {\n    let totalUrl: string = this.url;\n    if (page) totalUrl += `?_page=${page}&_limit=${this.limit}`;\n    const response: Response = await fetch(totalUrl, { method: 'GET' });\n    const winners: Array<Winner> = await response.json();\n    return winners;\n  }\n\n  async setWinner(racer: Racer): Promise<void> {\n    const seconds = Number((racer.carAnimation.currentTime / 1000).toFixed(2));\n    const newWinner = {\n      id: racer.id,\n      time: seconds,\n      wins: 1,\n    };\n    await fetch(this.url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newWinner),\n    });\n  }\n\n  async updateWinner(winner: Winner): Promise<void> {\n    const { id: currentId, time: currentTime, wins: currentWins }: Winner = winner;\n    const winnerData = await this.getWinner(currentId);\n    const updatedBody: Winner = {\n      time: Math.min(winnerData.time, currentTime),\n      wins: currentWins + 1,\n    };\n\n    await fetch(`${this.url}/${currentId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updatedBody),\n    });\n  }\n}\n\nexport default WinnerControls;\n","import GarageControls from '../controls/garage';\r\nimport WinnersControls from '../controls/winners';\r\nimport {\r\n  CarData, PanelHTML, SortOption, TableItemData, Winner, WinnersState,\r\n} from '../utils/interfaces';\r\nimport { defaultWinnersState } from '../utils/supportConstants';\r\nimport { getTableItem, getWinnerPanel, setElement } from '../utils/supportMethods';\r\nimport Garage from './garage';\r\n\r\nclass Winners {\r\n  baseUrl: string;\r\n\r\n  winnersControls: WinnersControls;\r\n\r\n  garageControls: GarageControls;\r\n\r\n  currentPage: number;\r\n\r\n  winnersList: HTMLElement;\r\n\r\n  sortOptionList: Array<SortOption>;\r\n\r\n  prevSortOption: SortOption;\r\n\r\n  constructor(url: string) {\r\n    this.baseUrl = url;\r\n    this.currentPage = 1;\r\n    this.sortOptionList = null;\r\n    this.prevSortOption = null;\r\n    this.winnersList = setElement({ tag: 'UL', classList: ['winners-list'] });\r\n    this.winnersControls = new WinnersControls(url);\r\n    this.garageControls = new GarageControls(url);\r\n  }\r\n\r\n  async init() {\r\n    const root: HTMLElement = document.getElementById('root');\r\n    root.replaceChildren();\r\n\r\n    const savedState: WinnersState = JSON.parse(localStorage.getItem('userWinnersState'));\r\n    const {\r\n      prevSortOption,\r\n      sortOptionList,\r\n      page,\r\n    }: WinnersState = savedState || defaultWinnersState;\r\n    this.prevSortOption = prevSortOption;\r\n    this.sortOptionList = sortOptionList;\r\n    this.currentPage = page;\r\n\r\n    const {\r\n      panel,\r\n      controls: [garageRoute, pagePrev, pageNext, wins, bestTime],\r\n    }: PanelHTML = getWinnerPanel(this.winnersList);\r\n    garageRoute.addEventListener('click', () => this.goToGarage());\r\n    pagePrev.addEventListener('click', () => this.renderWinners(-1));\r\n    pageNext.addEventListener('click', () => this.renderWinners(1));\r\n    [wins, bestTime].forEach((button, index) => {\r\n      const sortOption: SortOption = this.sortOptionList[index];\r\n      button.addEventListener('click', () => this.sortBy(sortOption));\r\n    });\r\n\r\n    root.append(panel);\r\n\r\n    await this.renderWinners();\r\n    if (prevSortOption) this.sortBy(prevSortOption);\r\n    this.updatePageDescription();\r\n  }\r\n\r\n  async renderWinners(direction?: number) {\r\n    if (direction) this.currentPage += direction;\r\n    const winners: Array<Winner> = await this.winnersControls.getWinners(this.currentPage);\r\n\r\n    if (this.currentPage < 1) {\r\n      this.currentPage = 1;\r\n      this.renderWinners();\r\n      return;\r\n    }\r\n    if (this.currentPage > 1 && !winners.length) {\r\n      this.renderWinners(-1);\r\n      return;\r\n    }\r\n\r\n    const rowDataList: Array<TableItemData> = await Promise.all(winners.map(async (winner) => {\r\n      const carData: CarData = await this.garageControls.getCar(winner.id);\r\n      const mergedData: TableItemData = { ...winner, ...carData };\r\n      return mergedData;\r\n    }));\r\n\r\n    const winnersItems: Array<HTMLElement> = rowDataList.map((rowData) => getTableItem(rowData));\r\n    this.winnersList.replaceChildren();\r\n    this.winnersList.append(...winnersItems);\r\n    this.updatePageDescription();\r\n  }\r\n\r\n  async updatePageDescription() {\r\n    const winners = await this.winnersControls.getWinners();\r\n    const pageDescriptionElem: HTMLElement = document.querySelector('.page-description');\r\n    pageDescriptionElem.textContent = `Page #${this.currentPage} (${winners.length})`;\r\n  }\r\n\r\n  sortBy(sortOption: SortOption) {\r\n    this.prevSortOption = { ...sortOption };\r\n    const { key, force }: SortOption = sortOption;\r\n    const winnersItems = Array.from(this.winnersList.children);\r\n    const sortedItems = winnersItems.sort((winnerA, winnerB) => {\r\n      const valueA = Number(winnerA.querySelector(`.winner-${key}`).textContent);\r\n      const valueB = Number(winnerB.querySelector(`.winner-${key}`).textContent);\r\n      return force ? valueB - valueA : valueA - valueB;\r\n    });\r\n    this.winnersList.replaceChildren(...sortedItems);\r\n    const nextSortOption = this.sortOptionList.find((option) => sortOption.key === option.key);\r\n    nextSortOption.force = !force;\r\n  }\r\n\r\n  goToGarage() {\r\n    const winnerState: WinnersState = {\r\n      page: this.currentPage,\r\n      sortOptionList: this.sortOptionList,\r\n      prevSortOption: this.prevSortOption,\r\n    };\r\n    localStorage.setItem('userWinnersState', JSON.stringify(winnerState));\r\n    const garage = new Garage(this.baseUrl);\r\n    garage.init();\r\n  }\r\n}\r\n\r\nexport default Winners;\r\n","import { EngineStat } from '../utils/interfaces';\r\n\r\nclass EngineControls {\r\n  url: string;\r\n\r\n  constructor(baseUrl: string) {\r\n    this.url = `${baseUrl}/engine`;\r\n  }\r\n\r\n  async stop(id: number): Promise<void> {\r\n    const url = `${this.url}?id=${id}&status`;\r\n    await fetch(`${url}=stopped`, { method: 'PATCH' });\r\n  }\r\n\r\n  async start(id: number): Promise<number> {\r\n    const url = `${this.url}?id=${id}&status`;\r\n    const startResponse: Response = await fetch(`${url}=started`, { method: 'PATCH' });\r\n    const engineStat: EngineStat = await startResponse.json();\r\n    return Math.round(engineStat.distance / engineStat.velocity);\r\n  }\r\n\r\n  async drive(id: number): Promise<Response> {\r\n    const url = `${this.url}?id=${id}&status`;\r\n    const driveResponse: Response = await fetch(`${url}=drive`, { method: 'PATCH' });\r\n    return driveResponse;\r\n  }\r\n}\r\n\r\nexport default EngineControls;\r\n","import { setElement } from '../utils/supportMethods';\r\nimport { popupOptions, popupWindowKeyFrames, popupWrapperKeyFrames } from '../utils/supportConstants';\r\n\r\nclass Popup {\r\n  isActive: boolean;\r\n\r\n  wrapper: HTMLElement;\r\n\r\n  element: HTMLElement;\r\n\r\n  constructor() {\r\n    this.wrapper = setElement({ tag: 'DIV', classList: ['popup-wrapper'] });\r\n    this.element = setElement({ tag: 'DIV', classList: ['popup'] });\r\n    this.wrapper.append(this.element);\r\n    this.isActive = false;\r\n\r\n    this.wrapper.addEventListener('click', () => this.destroy());\r\n  }\r\n\r\n  draw(message: string) {\r\n    if (this.isActive) return;\r\n    this.isActive = true;\r\n    this.element.textContent = message;\r\n    document.body.append(this.wrapper);\r\n\r\n    const wrapperAppear: Animation = this.toggleWrapper(true);\r\n    wrapperAppear.onfinish = (): void => {\r\n      this.wrapper.classList.add('active');\r\n      const windowAppear: Animation = this.toggleWindow(true);\r\n      windowAppear.onfinish = (): void => this.element.classList.add('active');\r\n    };\r\n  }\r\n\r\n  destroy() {\r\n    const windowDisapper: Animation = this.toggleWindow(false);\r\n    windowDisapper.onfinish = (): void => {\r\n      this.element.classList.remove('active');\r\n\r\n      const wrapperDisappear: Animation = this.toggleWrapper(false);\r\n      wrapperDisappear.onfinish = () => {\r\n        this.element.classList.remove('active');\r\n        this.wrapper.remove();\r\n        this.isActive = false;\r\n      };\r\n    };\r\n  }\r\n\r\n  toggleWrapper(force: boolean): Animation {\r\n    const keyFrames = force ? popupWrapperKeyFrames : [...popupWrapperKeyFrames].reverse();\r\n    return this.wrapper.animate(keyFrames, popupOptions);\r\n  }\r\n\r\n  toggleWindow(force: boolean): Animation {\r\n    const keyFrames = force ? popupWindowKeyFrames : [...popupWindowKeyFrames].reverse();\r\n    return this.element.animate(keyFrames, popupOptions);\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import EngineControls from '../controls/engine';\r\nimport GarageControls from '../controls/garage';\r\nimport WinnerControls from '../controls/winners';\r\nimport { CarData, Racer, Winner } from '../utils/interfaces';\r\nimport {\r\n  getRacer, toggleEngineButtons, toggleRaceButtons, toggleUserControls,\r\n} from '../utils/supportMethods';\r\nimport Popup from '../components/popup';\r\n\r\nclass RaceField {\r\n  raceMode: boolean;\r\n\r\n  activeRacers: Array<Racer>;\r\n\r\n  isRace: boolean;\r\n\r\n  winnerControls: WinnerControls;\r\n\r\n  engineControls: EngineControls;\r\n\r\n  garageControls: GarageControls;\r\n\r\n  popup: Popup;\r\n\r\n  constructor(baseUrl: string) {\r\n    this.isRace = false;\r\n    this.activeRacers = [];\r\n    this.winnerControls = new WinnerControls(baseUrl);\r\n    this.engineControls = new EngineControls(baseUrl);\r\n    this.garageControls = new GarageControls(baseUrl);\r\n    this.popup = new Popup();\r\n  }\r\n\r\n  async prepareCar(id: number): Promise<number> {\r\n    if (!this.isRace) toggleEngineButtons(id, true, true);\r\n    const sameRacerIndex: number = this.activeRacers.findIndex((racer) => racer.id === id);\r\n    if (sameRacerIndex !== -1) this.activeRacers.splice(sameRacerIndex, 1);\r\n    const raceTime = await this.engineControls.start(id);\r\n    return raceTime;\r\n  }\r\n\r\n  async driveCar(id: number, raceTime: number): Promise<Racer> {\r\n    if (!this.isRace) toggleEngineButtons(id, true, false);\r\n    const newRacer: Racer = getRacer(id, raceTime);\r\n    this.activeRacers.push(newRacer);\r\n    const driveResponse: Response = await this.engineControls.drive(id);\r\n\r\n    if (driveResponse.status === 200 && newRacer.isActive) {\r\n      newRacer.carAnimation.finish();\r\n    } else if (driveResponse.status === 500) {\r\n      newRacer.isActive = false;\r\n      newRacer.carAnimation.pause();\r\n    }\r\n\r\n    return newRacer;\r\n  }\r\n\r\n  async startCar(id: number): Promise<Racer> {\r\n    const raceTime: number = await this.prepareCar(id);\r\n    const racer: Racer = await this.driveCar(id, raceTime);\r\n    return racer;\r\n  }\r\n\r\n  async stopCar(id: number) {\r\n    if (!this.isRace) toggleEngineButtons(id, false, true);\r\n    const stoppedRacerIndex: number = this.activeRacers.findIndex((racer) => racer.id === id);\r\n    const stoppedRacer: Racer = this.activeRacers[stoppedRacerIndex];\r\n    this.activeRacers.splice(stoppedRacerIndex, 1);\r\n    stoppedRacer.carAnimation.cancel();\r\n    await this.engineControls.stop(id);\r\n  }\r\n\r\n  async startRace(currentPage: number) {\r\n    this.isRace = true;\r\n    toggleUserControls(false);\r\n    const carDataList = await this.garageControls.getCars(currentPage);\r\n    const idList = carDataList.map((carData) => carData.id);\r\n\r\n    const racersTimeList: Array<number> = await Promise.all(idList.map(async (id) => {\r\n      const time: number = await this.prepareCar(id);\r\n      return time;\r\n    }));\r\n    const racers: Array<Racer> = await Promise.all(idList.map(async (id, index) => {\r\n      const racer: Racer = await this.driveCar(id, racersTimeList[index]);\r\n      return racer;\r\n    }));\r\n\r\n    toggleRaceButtons(false);\r\n    const activeRacers: Array<Racer> = racers.filter((racer) => racer.isActive);\r\n    const winner: Racer = activeRacers.reduce((potentialWinner, racer) => {\r\n      const isBetter: boolean = potentialWinner.raceTime > racer.raceTime;\r\n      return isBetter ? racer : potentialWinner;\r\n    }, activeRacers[0]);\r\n    const car: CarData = await this.garageControls.getCar(winner.id);\r\n    this.popup.draw(`${car.name} finished in ${winner.raceTime}ms!!!`);\r\n\r\n    try {\r\n      const savedWinner: Winner = await this.winnerControls.getWinner(winner.id);\r\n      await this.winnerControls.updateWinner(savedWinner);\r\n    } catch (err) {\r\n      await this.winnerControls.setWinner(winner);\r\n    }\r\n  }\r\n\r\n  async resetRace(currentPage: number) {\r\n    const carDataList = await this.garageControls.getCars(currentPage);\r\n    const idList = carDataList.map((carData) => carData.id);\r\n\r\n    await Promise.all(idList.map(async (id) => {\r\n      await this.stopCar(id);\r\n    }));\r\n    toggleUserControls(true);\r\n    toggleRaceButtons(true);\r\n    this.isRace = false;\r\n  }\r\n}\r\n\r\nexport default RaceField;\r\n","import {\r\n  CarData, GarageState, PanelHTML, Racer,\r\n} from '../utils/interfaces';\r\nimport {\r\n  setElement,\r\n  getCarHTML,\r\n  getRandomCarDataList,\r\n  getCarDataFromContainer,\r\n  getControlPanelHTML,\r\n  setCarDataToContainer,\r\n} from '../utils/supportMethods';\r\nimport Winners from './winners';\r\nimport GarageControls from '../controls/garage';\r\nimport RaceField from '../components/race';\r\nimport { defaultGarageState } from '../utils/supportConstants';\r\n\r\nclass Garage {\r\n  currentPage: number;\r\n\r\n  carElemList: HTMLElement;\r\n\r\n  baseUrl: string;\r\n\r\n  selectedId: number | null;\r\n\r\n  garageControls: GarageControls;\r\n\r\n  raceField: RaceField;\r\n\r\n  constructor(baseUrl: string) {\r\n    this.currentPage = 1;\r\n    this.baseUrl = baseUrl;\r\n    this.carElemList = setElement({ tag: 'UL', classList: ['car-list'] });\r\n    this.garageControls = new GarageControls(baseUrl);\r\n    this.raceField = new RaceField(baseUrl);\r\n    this.selectedId = null;\r\n  }\r\n\r\n  async renderCars(direction?: number): Promise<void> {\r\n    if (direction) this.currentPage += direction;\r\n    const carDataList = await this.garageControls.getCars(this.currentPage);\r\n\r\n    if (this.currentPage < 1) {\r\n      this.currentPage = 1;\r\n      this.renderCars();\r\n      return;\r\n    }\r\n    if (this.currentPage > 1 && !carDataList.length) {\r\n      this.renderCars(-1);\r\n      return;\r\n    }\r\n    this.carElemList.replaceChildren();\r\n\r\n    carDataList.forEach((carData: CarData) => {\r\n      const { panel, controls: [select, remove, start, stop] }: PanelHTML = getCarHTML(carData);\r\n      select.addEventListener('click', () => this.selectCar(carData.id));\r\n      remove.addEventListener('click', () => this.removeCar(carData.id));\r\n      start.addEventListener('click', () => this.raceField.startCar(carData.id));\r\n      stop.addEventListener('click', () => this.raceField.stopCar(carData.id));\r\n      this.carElemList.append(panel);\r\n    });\r\n    this.updatePageDescription();\r\n  }\r\n\r\n  async selectCar(id: number) {\r\n    this.selectedId = id;\r\n    const selectedCarData: CarData = await this.garageControls.getCar(id);\r\n    setCarDataToContainer('.update-panel', selectedCarData);\r\n  }\r\n\r\n  async removeCar(id: number): Promise<Racer | void> {\r\n    await this.garageControls.deleteCar(id);\r\n    await this.renderCars();\r\n    this.updatePageDescription();\r\n  }\r\n\r\n  init() {\r\n    const root = document.getElementById('root');\r\n    root.replaceChildren();\r\n\r\n    let garageState: GarageState | null = JSON.parse(localStorage.getItem('userGarageState'));\r\n    if (!garageState) garageState = defaultGarageState;\r\n    if (garageState.selectedID) this.selectedId = garageState.selectedID;\r\n    this.currentPage = garageState.page;\r\n\r\n    const garageContainer = setElement({ tag: 'DIV', classList: ['garage'] });\r\n    const {\r\n      panel,\r\n      controls: [winnersRoute, create, update, generate, pagePrev, pageNext, startRace, resetRace],\r\n    }: PanelHTML = getControlPanelHTML(garageState);\r\n    winnersRoute.addEventListener('click', () => this.goToWinners());\r\n    create.addEventListener('click', () => this.addCar());\r\n    update.addEventListener('click', () => this.updateCar());\r\n    generate.addEventListener('click', () => this.generateCars());\r\n    pagePrev.addEventListener('click', () => this.renderCars(-1));\r\n    pageNext.addEventListener('click', () => this.renderCars(1));\r\n    startRace.addEventListener('click', () => this.raceField.startRace(this.currentPage));\r\n    resetRace.addEventListener('click', () => this.raceField.resetRace(this.currentPage));\r\n\r\n    garageContainer.append(panel, this.carElemList);\r\n    root.append(garageContainer);\r\n\r\n    this.renderCars();\r\n  }\r\n\r\n  async updatePageDescription() {\r\n    const carList = await this.garageControls.getCars();\r\n    const descriptionText = `page ${this.currentPage} (${carList.length} cars)`;\r\n    const despriptionElement: HTMLElement = document.querySelector('.page-description');\r\n    despriptionElement.textContent = descriptionText;\r\n  }\r\n\r\n  async addCar(): Promise<void> {\r\n    const carData: CarData = getCarDataFromContainer('.create-panel');\r\n    await this.garageControls.createCar(carData);\r\n    await this.renderCars();\r\n  }\r\n\r\n  async updateCar(): Promise<void> {\r\n    if (this.selectedId) {\r\n      const selectedCarData: CarData = getCarDataFromContainer('.update-panel');\r\n      await this.garageControls.updateCar(this.selectedId, selectedCarData);\r\n      this.renderCars();\r\n    }\r\n  }\r\n\r\n  async generateCars(): Promise<void> {\r\n    const randomCarDataList: Array<CarData> = getRandomCarDataList();\r\n    await Promise.all(randomCarDataList.map(async (randomCarData) => {\r\n      const carData: CarData = await this.garageControls.createCar(randomCarData);\r\n      return carData;\r\n    }));\r\n    this.renderCars();\r\n  }\r\n\r\n  goToWinners(): void {\r\n    const garageState: GarageState = {\r\n      page: this.currentPage,\r\n      selectedID: this.selectedId,\r\n      createState: getCarDataFromContainer('.create-panel'),\r\n      updateState: getCarDataFromContainer('.update-panel'),\r\n    };\r\n    localStorage.setItem('userGarageState', JSON.stringify(garageState));\r\n    const winners = new Winners(this.baseUrl);\r\n    winners.init();\r\n  }\r\n}\r\n\r\nexport default Garage;\r\n","import './style.scss';\r\nimport App from './components/app';\r\n\r\nconst app: App = new App();\r\napp.init();\r\n","import Garage from './garage';\r\n\r\nclass App {\r\n  baseUrl: string;\r\n\r\n  constructor() {\r\n    this.baseUrl = 'http://127.0.0.1:3000';\r\n  }\r\n\r\n  init() {\r\n    const garage = new Garage(this.baseUrl);\r\n    garage.init();\r\n    window.addEventListener('beforeunload', App.resetState);\r\n  }\r\n\r\n  static resetState() {\r\n    localStorage.removeItem('userGarageState');\r\n    localStorage.removeItem('userWinnersState');\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"names":["brands","models","colorCarSvg","defaultGarageState","page","createState","name","color","updateState","defaultWinnersState","sortOptionList","key","force","popupOptions","duration","easing","popupWrapperKeyFrames","opacity","popupWindowKeyFrames","transform","setElement","tag","classList","undefined","innerText","attributes","elem","document","createElement","add","textContent","String","forEach","attr","setAttribute","value","getPanel","data","panel","textInput","colorInput","acceptButton","append","getCarDataFromContainer","containerSelector","container","querySelector","toggleEngineButtons","id","forceStart","forceReset","startButton","stopButton","toggle","toggleRaceButtons","startRaceButton","resetRaceButton","toggleUserControls","Array","from","querySelectorAll","button","baseUrl","this","url","carLimit","getCar","fetch","method","json","getCars","totalUrl","createCar","carData","headers","body","JSON","stringify","updateCar","newCarData","deleteCar","limit","getWinner","response","ok","Error","getWinners","setWinner","racer","seconds","Number","carAnimation","currentTime","toFixed","newWinner","time","wins","updateWinner","winner","currentId","currentWins","winnerData","updatedBody","Math","min","currentPage","prevSortOption","winnersList","winnersControls","garageControls","init","root","getElementById","replaceChildren","savedState","parse","localStorage","getItem","winnerListElem","winnersPage","garageRoute","winnersTitle","winnersTable","tableHeading","number","car","bestTime","pageControls","pagePrev","pageDescription","pageNext","controls","getWinnerPanel","addEventListener","goToGarage","renderWinners","index","sortOption","sortBy","updatePageDescription","direction","winners","length","Promise","all","map","rowDataList","winnersItems","rowData","tableItemData","winnersItem","numberCell","carCell","innerHTML","style","fill","nameCell","winsCell","bestTimeCell","getTableItem","sortedItems","children","sort","winnerA","winnerB","valueA","valueB","find","option","winnerState","setItem","stop","start","engineStat","round","distance","velocity","drive","wrapper","element","isActive","destroy","draw","message","toggleWrapper","onfinish","toggleWindow","remove","keyFrames","reverse","animate","isRace","activeRacers","winnerControls","engineControls","popup","prepareCar","sameRacerIndex","findIndex","splice","driveCar","raceTime","newRacer","newCarElem","finishPosition","offsetWidth","left","oncancel","getRacer","push","driveResponse","status","finish","pause","startCar","stopCar","stoppedRacerIndex","stoppedRacer","cancel","startRace","carDataList","idList","racersTimeList","racers","filter","reduce","potentialWinner","savedWinner","resetRace","carElemList","raceField","selectedId","renderCars","carName","carColor","carItem","carControls","carNameElem","select","carContainer","dataset","getCarHTML","selectCar","removeCar","garageState","selectedID","garageContainer","winnersRoute","pageTitle","controlPanel","racePanel","createPanel","updatePanel","create","update","pageContainer","pageDesription","generate","getControlPanelHTML","goToWinners","addCar","generateCars","carList","descriptionText","selectedCarData","randomCarDataList","brand","model","colorCode","floor","random","toString","randomCarData","window","App","resetState","removeItem"],"sourceRoot":""}